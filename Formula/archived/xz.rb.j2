{% import 'template/utils.j2' as utils %}
{% call utils.autogen() %} {% endcall %}

class XzAT{{ ctx.class_version }} < Formula
  desc "General-purpose data compression with high compression ratio"
  homepage "https://tukaani.org/xz/"
  version "{{ ctx.version }}"
  url "https://downloads.sourceforge.net/project/lzmautils/xz-{{ ctx.tag }}.tar.gz"
  license "GPL-2.0"

  keg_only :versioned_formula

  depends_on "gcc" => :build

  def install
    ENV["CC"] = Formula["gcc"].opt_bin/"gcc-11"
    ENV["CXX"] = Formula["gcc"].opt_bin/"g++-11"
    ENV.append "CFLAGS", "-Os -DNDEBUG -s"
    ENV.append "CXXFLAGS", "-Os -DNDEBUG -s"
    ENV.append "CPPFLAGS", "-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"
    # https://github.com/esnet/iperf/issues/632#issuecomment-334104098
    ENV.append "LDFLAGS", "--static" if OS.linux?
    ENV.append "LDFLAGS", "-static-libgcc -static-libstdc++" if OS.mac?

    system "./configure", "--disable-shared", "--prefix=#{prefix}"
    system "make", "check"
    system "make", "install"
  end

  test do
    if OS.linux?
{% for bin in ctx.bins %}
      output = shell_output("ldd #{bin}/{{ bin }} 2>&1", 1).strip
      assert_equal "not a dynamic executable", output
{% endfor %}
    elsif OS.mac?
      # TODO(@curoky): use `otool -L` to check.
    end

    assert_match "liblzma {{ ctx.test_version }}", shell_output("#{bin}/xz --version").strip

    path = testpath/"data.txt"
    original_contents = "." * 1000
    path.write original_contents

    # compress: data.txt -> data.txt.xz
    system bin/"xz", path
    refute_predicate path, :exist?

    # decompress: data.txt.xz -> data.txt
    system bin/"xz", "-d", "#{path}.xz"
    assert_equal original_contents, path.read
  end
end
