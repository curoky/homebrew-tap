{% import 'template/utils.j2' as utils %}
{% call utils.autogen() %} {% endcall %}

class ProtocAT{{ ctx.class_version }} < Formula
  desc "Protocol buffers (Google's data interchange format)"
  homepage "https://github.com/protocolbuffers/protobuf/"
  version "{{ ctx.version }}"
  url "https://github.com/protocolbuffers/protobuf/archive/v{{ ctx.tag }}.zip"
  license "BSD-3-Clause"

  depends_on "cmake" => :build
  depends_on "ninja" => :build
  depends_on "gcc" => :build

  keg_only :versioned_formula

  def install
    # skip rpath
    inreplace "cmake/install.cmake", "if (UNIX AND NOT APPLE)", "if (OFF)", false

    mkdir "build" do
      args = std_cmake_args + %W[
        -GNinja
        --log-level=STATUS
        -DCMAKE_C_COMPILER=#{Formula["gcc"].opt_bin}/gcc-10
        -DCMAKE_CXX_COMPILER=#{Formula["gcc"].opt_bin}/g++-10
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DBUILD_SHARED_LIBS=OFF
        -Dprotobuf_WITH_ZLIB=OFF
        -Dprotobuf_BUILD_TESTS=OFF
      ]
      # -DCMAKE_FIND_LIBRARY_SUFFIXES='.a'
      args << "-DCMAKE_CXX_FLAGS_MINSIZEREL='-Os -DNDEBUG -s'"
      args << "-DCMAKE_EXE_LINKER_FLAGS='-static'" if OS.linux?
      # args << "-DCMAKE_EXE_LINKER_FLAGS='-static-libgcc -static-libstdc++'" if OS.mac?

      system "cmake", *args, "../cmake"
      system "ninja"
      system "ninja install"

      bin.install "protoc"
    end
  end

  test do
{% for bin in ctx.bins %}
    output = shell_output("ldd #{bin}/protoc 2>&1", 1).strip
    assert_equal "not a dynamic executable", output
{% endfor %}

    output = shell_output("#{bin}/protoc --version")
    if version ==  "3.2.1"
      assert_equal "libprotoc 3.2.0", output.strip
    elsif version ==  "3.4.1"
      assert_equal "libprotoc 3.4.0", output.strip
    elsif version ==  "3.5.2"
      assert_equal "libprotoc 3.5.1", output.strip
    elsif version ==  "3.13.0.1"
      assert_equal "libprotoc 3.13.0", output.strip
    else
      assert_equal "libprotoc {{ ctx.test_version }}", output.strip
    end

  end
end
