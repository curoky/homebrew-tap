{% import 'template/utils.j2' as utils %}
{% call utils.autogen() %} {% endcall %}

class LlvmToolsAT{{ ctx.class_version }} < Formula
  desc "Formatting tools for C, C++, Obj-C, Java, JavaScript, TypeScript"
  homepage "https://clang.llvm.org/docs/ClangFormat.html"
  # The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
  license "Apache-2.0"
  version "{{ ctx.version }}"
{% if ctx.extra_resource %}
  {% if ctx.use_old_registry %}
  url "https://releases.llvm.org/{{ ctx.tag }}/llvm-{{ ctx.tag }}.src.tar.xz"
  resource "clang" do
    url "https://releases.llvm.org/{{ ctx.tag }}/cfe-{{ ctx.tag }}.src.tar.xz"
  end
  resource "clang-tools-extra" do
    url "https://releases.llvm.org/{{ ctx.tag }}/clang-tools-extra-{{ ctx.tag }}.src.tar.xz"
  end
  {% else %}
  url "https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ ctx.tag }}/llvm-{{ ctx.tag }}.src.tar.xz"
  resource "clang" do
    url "https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ ctx.tag }}/cfe-{{ ctx.tag }}.src.tar.xz"
  end
  resource "clang-tools-extra" do
    url "https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ ctx.tag }}/clang-tools-extra-{{ ctx.tag }}.src.tar.xz"
  end
  {% endif %}
{% else %}
  url "https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ ctx.tag }}/llvm-project-{{ ctx.tag }}.tar.xz"
{% endif %}

  depends_on "cmake" => :build
  depends_on "ninja" => :build
  depends_on "gcc" => :build

  keg_only :versioned_formula

  def install
    if version == "8.0.1" # llvm8.0 https://bugs.gentoo.org/708730
      inreplace "include/llvm/Demangle/MicrosoftDemangleNodes.h",
        "#include <array>", "#include <array>\n#include <cstdint>\n#include <string>"
    end

{% if ctx.extra_resource %}
    (buildpath/"llvm_project/llvm").install buildpath.children
    (buildpath/"llvm_project/clang").install resource("clang")
    (buildpath/"llvm_project/clang-tools-extra").install resource("clang-tools-extra")

    mkdir "llvm_project/build" do
{% else %}
    mkdir "build" do
{% endif %}
      args = std_cmake_args
      args << "-DBUILD_SHARED_LIBS=OFF"
      args << "-DCMAKE_EXE_LINKER_FLAGS='-static'" if OS.linux?
      args << "-DCMAKE_EXE_LINKER_FLAGS='-static-libgcc -static-libstdc++'" if OS.mac?
      args << "-DCMAKE_FIND_LIBRARY_SUFFIXES='.a'"
      args << "-DCMAKE_BUILD_TYPE=MinSizeRel"
      args << "-DCMAKE_CXX_FLAGS_MINSIZEREL='-Os -DNDEBUG -s'"
      args << "-DCMAKE_C_COMPILER=gcc-10"
      args << "-DCMAKE_CXX_COMPILER=g++-10"

    if version == "3.9.1"
      args << "-DLLVM_EXTERNAL_CLANG_SOURCE_DIR=../clang"
      args << "-DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR=../clang-tools-extra"
    else
      args << "-DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra'"
    end
      args << "../llvm"
      system "cmake", "-G", "Ninja", *args
      system "ninja", "clang-format", "clang-query", "clang-tidy"

      bin.install "bin/clang-format", "bin/clang-query", "bin/clang-tidy"
    end
  end

  test do
    if OS.linux?
{% for bin in ctx.bins %}
      output = shell_output("ldd #{bin}/{{ bin }} 2>&1", 1).strip
      assert_equal "not a dynamic executable", output
{% endfor %}
    elsif OS.mac?
      # TODO(@curoky): use `otool -L` to check.
    end

    # NB: below C code is messily formatted on purpose.
    (testpath/"test.c").write <<~EOS
      int         main(char *args) { \n   \t printf("hello"); }
    EOS

    assert_equal "int main(char *args) { printf(\"hello\"); }\n",
        shell_output("#{bin}/clang-format -style=Google test.c")
  end
end
